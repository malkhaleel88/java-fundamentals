/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.util.*;

public class Library {

    public static void main(String[] args) {

    }


    public int[] roll(int numRoll) {

        int[] tryArray = new int[numRoll];

        for (int i = 0; i < tryArray.length; i++) {
            tryArray[i] = (int) (5 * Math.random()) + 1;
        }
        return tryArray;
    }

    public boolean containsDuplicates(int[] inputArray) {
      boolean status = false;
        for (int i = 0; i < inputArray.length; i++) {
            for (int j = i+1; j < inputArray.length; j++) {
                if (inputArray[i] == inputArray[j]){
                    status = true;
                }
            }
        }
        return status;
    }

    public double average(int[] inputArray) {
        int sum = 0;
        for (int i = 0; i < inputArray.length; i++) {
            sum = sum + inputArray[i];
        }
        double avg = (double) sum / inputArray.length;
        return avg;
    }

    public int[] lowestAverage(int[][] array){

        ArrayList<Double> averageCollection = new ArrayList<>();

        for(int i=0; i<array.length;i++){
            double sum=0;
            for(int j = 0 ; j<array[i].length;j++){
                sum+=array[i][j];
            }
            averageCollection.add(sum/array[i].length);
        }
        return array[averageCollection.indexOf(Collections.min(averageCollection))];
    }


    public String valuesNotInside(int[][] arr) {

        int max = arr[0][0];
        int min = arr[0][0];
        for (int i = 0; i < arr.length; i++) {

            for (int j = 0; j < arr[i].length; j++) {
                if (arr[i][j] <= min) {
                    min = arr[i][j];
                }
                if (arr[i][j] >= max) {
                    max = arr[i][j];
                }
            }
        }
        Set<Integer> uniqueTemp = new HashSet<>();
        String reqString = "High: " + max + "\n" + "Low : " + min;

        for (int i = 0; i < arr.length; i++) {

            for (int j = 0; j < arr[i].length; j++) {

                uniqueTemp.add(arr[i][j]);
            }
        }
        for(int i = min; i < max; i++)

            if(uniqueTemp.contains(i)){

            }
            else{
                reqString = reqString.concat("\n"+"Never saw temperature: " + i);
            }

        return reqString;
    }

    public String tally(List<String> name) {
        HashSet<String> uniqueNames = new HashSet<>();
        uniqueNames.addAll(name);
        int numOfVotes = 0;
        String nameWin = null;
        for (String item : uniqueNames) {
            int count = Collections.frequency(name, item);
            if (numOfVotes < count) {
                numOfVotes = count;
                nameWin = item;
            }
        }
        return nameWin;
    }


}